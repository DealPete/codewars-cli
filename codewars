#!/usr/bin/python

import getopt
import html2text
import json
import markdown
import os
import re
import requests
import sys
import time

h2t = html2text.HTML2Text()

extensions =   {'javascript' : 'js',
				'coffeescript' : 'coffee',
				'java' : 'java',
				'python' : 'py',
				'ruby' : 'rb',
				'haskell' : 'hs',
				'csharp' : 'cs',
				'typescript' : 'ts',
				'clojure' : 'clj',
				'elixir' : 'exs'
				}

def usage():
	u = open('usage.txt', 'r')
	print(u.read())
	exit()

opts, commands = getopt.getopt(sys.argv[1:], 'l:s:', ['language=', 'strategy='])

if len(commands) == 0:
	usage()

if commands[0] == 'help':
	usage()

if commands[0] == "desc":
	if len(sys.argv) < 3:
		usage()

	r = requests.get('https://www.codewars.com/api/v1/code-challenges/'
		+ sys.argv[2])
	print(r.json()['description'])
	sys.exit(0)

home = os.getenv("HOME")

arguments = {}

for opt, arg in opts:
	if opt in ('-l', '--language'):
		arguments['language'] = arg
	elif opt in ('-s', '--strategy'):
		arguments['strategy'] = arg

try:
	f = open(home + "/.config/codewars", 'r')
	config = json.loads(f.read())
	config.update(arguments)
	f.close()
except IOError:
	print("Writing config file:")
	config = {'language': 'javascript', 'strategy': 'random'}.update(arguments)
	print("Language: " + config['language'])
	print("Stratgy: " + config['strategy'] + "\n")
	f = open(home + "/.config/codewars", 'w')
	f.write(json.dumps(config))
	f.close()

if commands[0] == "register":
	if len(commands) < 2:
		usage()

	f = open(home + "/.config/codewars", 'w')
	config['key'] = commands[1]
	f.write(json.dumps(config))
	f.close()
	sys.exit(0)

if not 'key' in config:
	print("Couldn't find api key. Register your api key with:")
	print("codewars register API-KEY")
	sys.exit(1)

if commands[0] == "train":

	if len(commands) > 1:
		print("Submitted training request.  Kata:", commands[1],
			"  Language:", config['language'])
		r = requests.post('https://www.codewars.com/api/v1/code-challenges/'
			+ commands[1] + '/' + config['language'] + '/train',
			headers = {'Authorization': config['key']})
	else:
		print("Sumitted training request.  Strategy:", config['strategy'],
			"  Language:", config['language'])
		r = requests.post('https://www.codewars.com/api/v1/code-challenges/'
			+ config['language'] + '/train',
			headers = {'Authorization': config['key']},
			data = {'strategy': config['strategy']})
	
	if r.status_code != 200:
		print("Response status code", r.status_code)
		if r.status_code == 500:
			print("Internal Server Error - We had a problem with our server. Try again later.")
		sys.exit(1)

	res = r.json()

	if res['success'] == False:
		if res['reason'] == 'unauthorized':
			print("Couldn't valiate api key.")
			sys.exit(1)
		
		print("Failed to fetch data. Reason: ", res['reason'])
		sys.exit(1)

	print("Received data for Kata:", res['name'])

	config['projectId'] = res['session']['projectId']
	config['solutionId'] = res['session']['solutionId']

	f = open(home + "/.config/codewars", 'w')
	f.write(json.dumps(config))
	f.close()

	dirname = res['slug']

	if not os.path.exists(dirname):
		os.makedirs(dirname)

	try:
		file = dirname + '/response.json'
		f = open(file, 'w')
		f.write(json.dumps(res) + "\n")
		f.close()
		print("Wrote response data to", file)
	except IOError:
		print("Couldn't write response data.")

	try:
		file = dirname + '/description.md'
		f = open(file, 'w')
		f.write(res['description'] + "\n")
		f.close()
		print("Wrote description to", file)
	except IOError:
		print("Couldn't write description.")

	patterns = [re.compile('```\s*' + lang + r'\b.*?```', re.DOTALL) for lang in
		[i for i in extensions.keys()] + [i for i in extensions.values()] if not
		(lang == config['language'] or lang == extensions[config['language']])]

	text = res['description'] + '\n'

	patternMatches = [re.findall(pattern, text) for pattern in patterns]
	matches = [match for matches in patternMatches for match in matches]

	for match in matches:
		text = text.replace(match, '')

	try:
		file = dirname + '/description-' \
			+ extensions[config['language']] + '.html'
		f = open(file, 'w')
		f.write('<meta charset="utf-8">')
		
		html = markdown.markdown(text).replace("<code>", "<pre><code>"
			).replace("</code>", "</code></pre>")
		
		f.write(html)
		f.close()
		print("Wrote description formatted for", config['language'], "to", file)
	except IOError:
		print("Couldn't write formatted description.")

	try:
		file = dirname + '/solution.' + extensions[config['language']]
		f = open(file, 'w')
		f.write(res['session']['setup'] + "\n")
		f.close()
		print("Wrote setup to", file)
	except IOError:
		print("Couldn't write setup.")

	try:
		file = dirname + '/tests.' + extensions[config['language']]
		f = open(file, 'w')
		f.write(res['session']['exampleFixture'] + "\n")
		f.close()
		print("Wrote tests to", file)
	except IOError:
		print("Couldn't write setup.")

	sys.exit(0)

if commands[0] == "submit":
	if len(commands) < 2:
		usage()

	if not 'projectId' in config:
		print("Not currently training on a Kata!")
		sys.exit(1)

	try:
		file = open(commands[1], 'r')
		code = file.read()
		file.close()
	except IOError:
		print("Couldn't open file " + commands[1])
		sys.exit(1)

	r = requests.post("https://www.codewars.com/api/v1/code-challenges/projects/"
		+ config['projectId'] + "/solutions/" + config['solutionId'] + "/attempt",
		headers = {'Authorization': config['key']},
		data = {'code': code})
	
	res = r.json()
	
	if not res['success']:
		print("Failed to submit answer:")
		print(res)
		sys.exit(1)

	dmid = res['dmid']

	print("Waiting for response...")
	
	while True:
		r = requests.get("https://www.codewars.com/api/v1/deferred/"
			+ dmid, headers = {'Authorization': config['key']})

		res = r.json()

		if 'success' in res and res['success'] == True:
			for paragraph in res['output']:
				print(h2t.handle(paragraph))
			print(res['reason'])
			print("Time: " + str(res['wall_time']) + "ms  Passed:",
				res['summary']['passed'], " Failed:",
				res['summary']['failed'], " Errors:",
				res['summary']['errors'], "\n")
			sys.exit(0)

		time.sleep(.500)

if commands[0] == "finalize":

	if not 'projectId' in config:
		print("Not currently training on a Kata!")
		sys.exit(1)

	r = requests.post("https://www.codewars.com/api/v1/code-challenges/projects/"
		+ config['projectId'] + "/solutions/" + config['solutionId'] + "/finalize",
		headers = {'Authorization': config['key']})
	
	res = r.json()

	if res['success']:
		print("Submission accepted!")
		sys.exit(0)
	else:
		print("Submission failed: ", res['message'])
		sys.exit(0)

print("Unknown command " + commands[0])
sys.exit(1)
